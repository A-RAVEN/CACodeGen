#include <Generator/GeneratorManager.h>
#include <Generator/Generator.h>
#include <LanguageTypes/CodeInfoContainer.h>
#include <string_utils.h>
#include <set>

class CSharpBindingsGenerator : public ICodeGenerator
{
public:
    virtual void GenerateCode(WorkSpaceInfo const& workSpaceInfo, CodeInfoContainer const& codeInfoContainer) override;
};

CA_STATIC_GENERATOR(CSharpBindingsGenerator)

void CSharpBindingsGenerator::GenerateCode(WorkSpaceInfo const& workSpaceInfo, CodeInfoContainer const& codeInfoContainer)
{
    std::cout << "Generated CSharp Bindings: " << std::endl;

    Mustache::mustache sourceTemplate = Utils::CreateMustacheNoEscape
(R"(
// This file is generated by the code generator. Do not modify this file manually.
{{#usings}}
using {{using}};
{{/usings}}

public class {{class_name}}
{
    //Handle to the native object
    public IntPtr handle;{{#class_constructors}}
{{class_constructor}}
{{/class_constructors}}{{#getter_setters}}
{{getter_setter}}
{{/getter_setters}}{{#class_functions}}
{{class_function}}
{{/class_functions}}{{#native_methods}}
{{native_method}}
{{/native_methods}}
})");

 

    std::string projectName = workSpaceInfo.GetProjectName();
    projectName = Utils::replace(projectName, " ", "_");
    std::string libraryName = projectName;
    Mustache::data usings = Mustache::data::type::list;
    //Common usings
    usings.push_back(Mustache::data{"using", "System"});
    usings.push_back(Mustache::data{"using", "System.Runtime.InteropServices"});

    fs::path csDir = workSpaceInfo.GetCodeGenOutputPath() / "CSharp";
    fs::create_directories(csDir);
    for(auto const& pclassInfo : codeInfoContainer.GetAllClasses())
    {
        auto pCodeGenAttribute = pclassInfo->GetPropertyInfoInParents("CodeGen");
        if(pCodeGenAttribute)
        {
            std::string classSourceFileName = pclassInfo->GetFullName("_") + ".cs";

            std::string className = pclassInfo->getCurosr().getDisplayName();
            std::cout << "SOURCE FILE: " << classSourceFileName << std::endl;

            Mustache::data class_constructors = Mustache::data::type::list;
            Mustache::data getter_setters = Mustache::data::type::list;
            Mustache::data class_functions = Mustache::data::type::list;
            Mustache::data native_methods = Mustache::data::type::list;


            Mustache::data sourceFileData;
            sourceFileData["class_name"] = className;
            sourceFileData.set("usings", usings);
            sourceFileData.set("class_constructors", class_constructors);
            sourceFileData.set("getter_setters", getter_setters);
            sourceFileData.set("class_functions", class_functions);
            sourceFileData.set("native_methods", native_methods);
            
            fs::path sourceFilePass = csDir / classSourceFileName;
            std::fstream codegenfile;
            codegenfile.open(sourceFilePass, std::ios::out);
            if (!codegenfile.is_open())
            {
                std::cout << "Could not create file: " << sourceFilePass << std::endl;
            }
            else
            {
                codegenfile << sourceTemplate.render(sourceFileData);
                codegenfile.close();
            }
        }
    }
}
